// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.18;

// An example contract that is intentionally vulnerable.
contract Vault {
    mapping(address depositor => uint256) eth;

    constructor() payable {
        deposit();
    }

    function deposit() public payable {
        eth[msg.sender] += msg.value;
    }

    // function withdraw(uint value) public payable {
    //     send(msg.sender, value);
    //     eth[msg.sender] -= value;
    // }

    function withdraw(uint256 value) public payable {
        uint256 eth_amt = eth[msg.sender];
        send(msg.sender, value);
        eth[msg.sender] = eth_amt - value;
    }

    function send(address dest, uint256 value) private {
        (bool success,) = dest.call{value: value}("");
        require(success);
    }
}
